@startuml

' Customization Settings
skinparam dpi 300
skinparam classattributeiconsize 0
skinparam linetype ortho
' Begin UML Here

' Most activity functions are shown in storyboard so we will update this later
package "Activities" {

    class ProfileActivity

    class LeaderboardActivity

    class OtherPlayerActivity

    class SignupActivity
    {
        +usernameInvalid()
    }

    class QrInventoryActivity
    {
        -qrDataList: QrCode[]
    }

    class SearchActivity

    class MapActivity

    class MainMenuActivity
}

package "Controllers" {

    class ProfileController
    {
        -player: Player
        -activity: Activity

        +getPlayerName(): String
        +getPlayerContact(): String
        +generatePlayerQr(): Image
    }

    class LeaderboardController
    {
        -myScore: Integer
        -sortBy: String
        -currentRanking: Player[]

        ' PlayerController doesn't return all players at once, one player at a time.
        +sortData()
        +setSortBy(method:String)
    }

    class SignupController
    {
        +validateUsername(playerName: String): Boolean
        +addNewPlayer(newusername: String, contact: String, password: String)
        +getUsername(): String
        ' checks the app is the first time run or load in current player in playerController
        +checkExisitingSession(): Boolean
    }

    class PlayerController
    {
        -player: Player

        ' Constructor of PlayerController takes a username and pull Player from database
        +getPlayer(username: String): Player
        ' We will use a HashMap to send all the player's data as there would be
        ' too many parameters otherwise.
        ' Additionally, it would allow us to send NULL to specify unchanged parameters.
        +savePlayerData(playerData: HashMap)
    }

    class OtherPlayerController
    {
        -player: Player
        -inventoryArray: String[]

        +setPlayer(username: String)
        +getPlayerInfo(infoName: String): String
        +updateComment(comment: String, qrCodeHash: String)
    }

    class QrCodeController
    {
        -username: String

        +addQrCode(qrCodeHash: String, geolocation: String)
        +updateComment(qrCodeHash: String, comment: String)
        +deleteQrCode(qrCodeHash: String)
    }

    class QrInventoryController
    {
        -username: String

        ' FIX: Functionality not in CRC (who are we sending a hash to?)
        +sendHash(qrCodeHash: String)
    }

    class SearchController
    {
        +getResultByUsername(search: String): String[]
        +sendUserToProfile(selectedUser: String)
        +getResultByLocation(search: String): String[]
    }

    class LocationController
    {
        +addLocation(location: String, QrCodeHash: String)
        +getQrCode(location: String): QrCode[]
    }

    class MapController
    {
        -mapData: HashMap

        +getQrCodeInfo()
        +sendDataToMap()
    }

    class CameraController
    {
        ' TODO: Add image class?
        -image: Image
        -qrHash: String

        +openCamera(): Image
        +analyzeImage(): String
    }

    class DatabaseController
    {
        ' Database instance
        -database: Database

        readFromDatabase(collection: String): HashMap
        writeToDatabase(collection: String, data: HashMap)
    }

    class RestoreSession
    {
        -userHash: String
        -player: Player

        +getUserQr(): String
        +loadPlayer(hash: String)
        +sendUserToMain()
    }
}

package "Models" {

    class Player
    {
        -username: String
        -qrInventory: String[]
        -contactInfo: HashMap
        -qrCount: Integer
        -totalScore: Integer

        +setUsername(name: String)
        +getUsername(): String
        +setContactInfo(field: String, info: String)
        +getContactInfo(field: String): String
        +setQrCount(count: Integer)
        +getQrCount(): Integer
        +setTotalScore(score: Integer)
        +getTotalScore(): Integer
        +setQrInventory(qrInventory: String[])
        +getQrInventory(): String[]
    }


    class QrCode
    {
        -geolocation: String
        -qrCodeHash: String
        -comment: String

        +getGeolocation(): String
        +getQrCodeHash(): String
        +getComment(): String

        +setGeolocation(geolocation: String)
        +setQrCodeHash(qrCodeHash: String)
        +setComment(comment: String)
    }

    class QrAnalyzer
    {
        -image: Image

        +setImage(image: Image)
        ' Return QR Hash
        ' Raise error if problem
        +analyzeImage(): String
    }

    ' NOTE: May want to remove since Firebase implements
    class Database
    {
        -data: HashMap

        getData(collection: String): HashMap
        writeData(collection: String, data: HashMap)
    }

    note bottom: This is our\nFirebase instance.
}

' ProfileController "1" *-up- "1" ProfileActivity
ProfileController "1" *-- "1" Player

ProfileController --> Player: Get player username\nand contact
ProfileController -up-> ProfileActivity: Send username and contact
ProfileController -up-> ProfileActivity: Send user's QR image

' LeaderboardActivity "1" --* "1" LeaderboardController
LeaderboardController "1" --> "1" OtherPlayerController: Get players

' SignupActivity "1" --* "1" SignupController
SignupController "1" *-- "1" Player
SignupController "1" --> "1" PlayerController: \n\n\n\nCreates new player\nLoad current player
PlayerController "1" *-- "*" Player

' OtherPlayerController "1" *-- "1" OtherPlayerActivity
Player "1" --* "1" OtherPlayerController
OtherPlayerController --> PlayerController: Gets player
OtherPlayerController <-- OtherPlayerActivity: Updates\n comment
OtherPlayerController -> QrCodeController: Adds comment

SignupController --> RestoreSession: "Ask to handle\nreturning player"
SignupController -> DatabaseController: "\nCheck username \nuniquness"
RestoreSession <-- CameraController: "Return QR hash"
RestoreSession --> PlayerController: "Get player"
RestoreSession --> CameraController: "Ask to\n open camera"
RestoreSession -up-> MainMenuActivity: "Send user to"
CameraController -down-> QrAnalyzer: "Send image to analyze"
CameraController <-up- QrAnalyzer: "Return hash"

' QrInventoryController "1" *-- "1" QrInventoryActivity
QrInventoryController --> QrCodeController
QrCodeController "1" *-down- "1" QrCode: Update\ncomment
QrCodeController "1" --> "1" DatabaseController
QrCodeController "1" --> "1" QrCode: Creates 

SearchController "1" --> "1" PlayerController: Get usernames
' FIX: We shouldn't need an entire player object. Just a db call for usernames
SearchController "1" --> "1" LocationController: Get QR\nlocations 

LocationController --> DatabaseController: Get location data
MapController --> LocationController: Asks for location data

DatabaseController "1" *-- "1" Database

@enduml
